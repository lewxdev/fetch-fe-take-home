{"version":3,"sources":["components/App/theme.js","components/App/index.jsx","components/SelectField/index.jsx","helpers/api.js","helpers/lang/dialog.js","helpers/lang/errors.js","components/SignupForm/index.jsx","components/SubmitDialog/index.jsx","index.js"],"names":["themeContent","components","MuiButton","defaultProps","variant","MuiFormControl","fullWidth","MuiTextField","required","App","children","prefersDark","useMediaQuery","theme","createTheme","palette","mode","lg","breakpoints","down","ThemeProvider","CssBaseline","Container","maxWidth","SelectField","name","options","callback","o","MenuItem","value","NAME","toLowerCase","LABEL","toUpperCase","slice","LABEL_ID","useState","setValue","FormControl","InputLabel","id","Select","labelId","label","onChange","target","map","disabled","ENDPOINT_URL","getOptions","a","axios","get","then","data","postUser","post","status","Dialog","title","this","content","join","errorCreateUser","PASSWORD_MATCH","SignupForm","states","occupations","setOptions","setDialog","emailError","setEmailError","passwordError","setPasswordError","useEffect","Box","component","onSubmit","event","preventDefault","formEl","currentTarget","DATA","FormData","emailInvalid","validate","passwordInvalid","delete","Object","fromEntries","entries","response","catch","Grid","container","height","justifyContent","flexDirection","SubmitDialog","item","spacing","columns","xs","sm","TextField","error","helperText","type","abbreviation","sx","mt","Button","open","Boolean","onClose","window","location","reload","DialogTitle","DialogContent","DialogContentText","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a58fc78e.chunk.js","sourcesContent":["/** @type {import(\"@mui/material\").ThemeOptions} */\nconst themeContent = {\n\tcomponents: {\n\t\tMuiButton: {\n\t\t\tdefaultProps: {\n\t\t\t\tvariant: \"contained\",\n\t\t\t},\n\t\t},\n\t\tMuiFormControl: {\n\t\t\tdefaultProps: {\n\t\t\t\tfullWidth: true,\n\t\t\t},\n\t\t},\n\t\tMuiTextField: {\n\t\t\tdefaultProps: {\n\t\t\t\trequired: true,\n\t\t\t\tfullWidth: true,\n\t\t\t},\n\t\t},\n\t}\n}\n\nexport default themeContent\n","import { StrictMode } from \"react\"\nimport Container from \"@mui/material/Container\"\nimport CssBaseline from \"@mui/material/CssBaseline\"\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\"\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\"\n\nimport themeContent from \"./theme\"\n\n/**\n * The root React component of the app. Includes necessary configuration for MUI and React\n * @param {object} props - the component properties\n * @param {import(\"react\").ReactNode} props.children - provided children, typically JSX element(s)\n */\nexport default function App({ children }) {\n\tconst prefersDark = useMediaQuery(\"(prefers-color-scheme: dark)\")\n\tconst theme = createTheme(\n\t\t{ palette: { mode: prefersDark ? \"dark\" : \"light\" } },\n\t\tthemeContent\n\t)\n\tconst lg = useMediaQuery(theme.breakpoints.down(\"lg\"))\n\n\treturn (\n\t\t<StrictMode>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<Container maxWidth={lg ? \"sm\" : \"md\"}>{children}</Container>\n\t\t\t</ThemeProvider>\n\t\t</StrictMode>\n\t)\n}\n","// Components\nimport FormControl from \"@mui/material/FormControl\"\nimport InputLabel from \"@mui/material/InputLabel\"\nimport MenuItem from \"@mui/material/MenuItem\"\nimport Select from \"@mui/material/Select\"\n\n// Hooks\nimport { useState } from \"react\"\n\n/**\n * A sub-component of the `SignupForm` which implements a selection field by use of props\n * @param {object} props - the component properties\n * @param {string} props.name - the name of the select element (not case sensitive)\n * @param {array} props.options - a list of options to populate the select element\n * @param {function} props.callback - an optional callback override for the selection options\n */\nexport default function SelectField({\n\tname,\n\toptions,\n\tcallback = (o) => <MenuItem key={o} value={o} children={o} />,\n}) {\n\tconst NAME = name.toLowerCase()\n\tconst LABEL = `${name[0].toUpperCase()}${NAME.slice(1)}`\n\tconst LABEL_ID = `${NAME}-select-label`\n\n\tconst [value, setValue] = useState(\"\")\n\n\treturn (\n\t\t<FormControl required>\n\t\t\t<InputLabel id={LABEL_ID}>{LABEL}</InputLabel>\n\t\t\t<Select\n\t\t\t\tname={NAME}\n\t\t\t\tlabelId={LABEL_ID}\n\t\t\t\tlabel={LABEL}\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={({ target }) => setValue(target.value)}>\n\t\t\t\t{options?.map(callback) || (\n\t\t\t\t\t<MenuItem disabled>Loading {NAME}s...</MenuItem>\n\t\t\t\t)}\n\t\t\t</Select>\n\t\t</FormControl>\n\t)\n}\n","import axios from \"axios\"\n\n/** The provided URL to make HTTP requests on */\nconst ENDPOINT_URL = \"https://frontend-take-home.fetchrewards.com/form\"\n\n/**\n * An object representing a valid US state option\n * @typedef {object} State\n * @property {string} name - The literal name of the state\n * @property {string} abbreviation - The two-character abbreviation of the state\n */\n\n/**\n * An object of form selection fields as keys and their respective valid options\n * @typedef {object} SelectOptions\n * @property {string[]} occupations - A list of valid occupations (strings)\n * @property {State[]} states - A list of valid states (objects)\n */\n\n/**\n * Retrieves valid options for the form selection fields via the endpoint URL\n * @returns {Promise<SelectOptions>} a Promise for the SelectionOptions\n */\nexport const getOptions = async () =>\n\tawait axios.get(ENDPOINT_URL).then(({ data }) => data)\n\n/**\n * An object representing the POST body for the user creation form\n * @typedef {object} PostBody\n * @property {string} name - The full name of the user\n * @property {string} email - A valid email for the user\n * @property {string} password - The user password (backend should process this)\n * @property {string} occupation - The occupation of the user\n * @property {string} state - The US state of the user (abbreviated)\n */\n\n/**\n * Sends valid JSON representing user creation data from a submission form\n * @param {PostBody} data - the POST body for the user creation form\n * @returns the `status` of the response given it was successful\n */\nexport const postUser = async (data) =>\n\tawait axios.post(ENDPOINT_URL, data).then(({ status }) => status)\n","// Helpers for generating dialog message content (objects with `title` and `content` properties)\n\n/** A utility class for constructing Dialog objects */\nclass Dialog {\n\t/**\n\t * @param {string} title\n\t * @param  {...string} content\n\t */\n\tconstructor(title, ...content) {\n\t\tthis.title = title\n\t\tthis.content = content.join(\"\\n\")\n\t}\n}\n\n/**\n * Returns a Dialog object representing the success of a newly created user\n * @param {FormData} data - the form data of the successfully created user\n */\nexport const successCreateUser = (data) =>\n\tnew Dialog(\n\t\t\"Success!\",\n\t\t`Created new user \"${data.get(\"name\")}\".`,\n\t\t`Look for an email confirmation in your inbox: ${data.get(\"email\")}`\n\t)\n\n/** Returns a Dialog object representing an error in the create user process */\nexport const errorCreateUser = () =>\n\tnew Dialog(\n\t\t\"Oops.\",\n\t\t\"Something went wrong when trying to create that user.\",\n\t\t\"It could be our fault, try again?\"\n\t)\n","// Portable constants for error messages to display to the user\n\n/** Error to display when the `password2` field doesn't match the `password` field */\nexport const PASSWORD_MATCH = \"Passwords do not match\"\n\n/** Error to display when `email-validator` shows the `email` field to be false */\nexport const EMAIL_INVALID = \"Email address is invalid\"\n","// Components\nimport Box from \"@mui/material/Box\"\nimport Button from \"@mui/material/Button\"\nimport Grid from \"@mui/material/Grid\"\nimport MenuItem from \"@mui/material/MenuItem\"\nimport TextField from \"@mui/material/TextField\"\nimport { SelectField, SubmitDialog } from \"@components\"\n\n// Hooks\nimport { useState, useEffect } from \"react\"\n\n// Miscellaneous\nimport { validate } from \"email-validator\"\nimport { getOptions, postUser } from \"@helpers/api\"\nimport { successCreateUser, errorCreateUser } from \"@helpers/lang/dialog\"\nimport { PASSWORD_MATCH, EMAIL_INVALID } from \"@helpers/lang/errors\"\n/** @typedef {import(\"@helpers/api\").SelectOptions} SelectOptions */\n\n/** The primary form component with all required fields for user creation */\nexport default function SignupForm() {\n\t/** @type {[SelectOptions, import(\"react\").Dispatch<SelectOptions>]} */\n\tconst [{ states, occupations }, setOptions] = useState({})\n\tconst [{ title, content }, setDialog] = useState({})\n\tconst [emailError, setEmailError] = useState(false)\n\tconst [passwordError, setPasswordError] = useState(false)\n\n\t/**\n\t * The form submission event handler for validating and sending the POST request\n\t * @type {import(\"react\").FormEventHandler<HTMLFormElement>}\n\t */\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tconst { currentTarget: formEl } = event\n\t\tconst DATA = new FormData(formEl)\n\n\t\t// Form validation\n\t\tconst emailInvalid = !validate(DATA.get(\"email\"))\n\t\tconst passwordInvalid = DATA.get(\"password\") !== DATA.get(\"password2\")\n\n\t\tsetEmailError(emailInvalid)\n\t\tsetPasswordError(passwordInvalid)\n\t\tif (emailInvalid || passwordInvalid) return\n\n\t\t// Form submission\n\t\tDATA.delete(\"password2\")\n\n\t\tpostUser(Object.fromEntries(DATA.entries()))\n\t\t\t.then((response) => {\n\t\t\t\tif (response !== 200) return setDialog(errorCreateUser())\n\t\t\t\tsetDialog(successCreateUser(DATA))\n\t\t\t})\n\t\t\t.catch(() => setDialog(errorCreateUser()))\n\t}\n\n\t// Retrieve options from API when component mounts\n\tuseEffect(() => (async () => setOptions(await getOptions()))(), [])\n\n\treturn (\n\t\t<Box component=\"form\" onSubmit={handleSubmit}>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\theight=\"100vh\"\n\t\t\t\tjustifyContent=\"center\"\n\t\t\t\tflexDirection=\"column\">\n\t\t\t\t<SubmitDialog title={title} content={content} />\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Grid container spacing={2} columns={2}>\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<TextField name=\"name\" label=\"Full Name\" />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tlabel=\"Email Address\"\n\t\t\t\t\t\t\t\terror={emailError}\n\t\t\t\t\t\t\t\thelperText={emailError && EMAIL_INVALID}\n\t\t\t\t\t\t\t\tonChange={() => setEmailError(false)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\terror={passwordError}\n\t\t\t\t\t\t\t\thelperText={passwordError && PASSWORD_MATCH}\n\t\t\t\t\t\t\t\tonChange={() => setPasswordError(false)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tname=\"password2\"\n\t\t\t\t\t\t\t\tlabel=\"Confirm Password\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\terror={passwordError}\n\t\t\t\t\t\t\t\thelperText={passwordError && PASSWORD_MATCH}\n\t\t\t\t\t\t\t\tonChange={() => setPasswordError(false)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<SelectField\n\t\t\t\t\t\t\t\tname=\"occupation\"\n\t\t\t\t\t\t\t\toptions={occupations}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t<SelectField\n\t\t\t\t\t\t\t\tname=\"state\"\n\t\t\t\t\t\t\t\toptions={states}\n\t\t\t\t\t\t\t\tcallback={({ name, abbreviation }) => (\n\t\t\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\t\t\tkey={abbreviation}\n\t\t\t\t\t\t\t\t\t\tvalue={abbreviation}>\n\t\t\t\t\t\t\t\t\t\t{name}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Box sx={{ mt: 2 }}>\n\t\t\t\t\t\t<Grid container spacing={2} justifyContent=\"end\">\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button type=\"submit\">Signup</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Box>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Box>\n\t)\n}\n","import Dialog from \"@mui/material/Dialog\"\nimport DialogContent from \"@mui/material/DialogContent\"\nimport DialogContentText from \"@mui/material/DialogContentText\"\nimport DialogTitle from \"@mui/material/DialogTitle\"\n\n/**\n * A sub-component of the `SignupForm` to display feedback to the user on submission\n * @param {object} props - the component properties\n * @param {string=} props.title - the title to use for the dialog\n * @param {string} props.content - the message content of the dialog\n */\nexport default function SubmitDialog({ title, content }) {\n\treturn (\n\t\t<Dialog\n\t\t\topen={Boolean(content)}\n\t\t\tonClose={() => window.location.reload()}>\n\t\t\t{title && <DialogTitle>{title}</DialogTitle>}\n\t\t\t<DialogContent>\n\t\t\t\t<DialogContentText>{content}</DialogContentText>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t)\n}\n","import ReactDOM from \"react-dom\"\nimport { App, SignupForm } from \"@components\"\n\nReactDOM.render(\n\t<App>\n\t\t<SignupForm />\n\t</App>,\n\tdocument.querySelector(\"#root\")\n)\n"],"sourceRoot":""}